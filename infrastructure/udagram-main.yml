Description: >
    Rudger Gravestein / Udacity / Udagram

    Deploy a high-availability web app using CloudFormation.


Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 10.0.0.0/16
        AllowedPattern: '(\d{1,3})\.(\d{1,3})\.0\.0/16'
        ConstraintDescription: Must be a valid IP CIDR block with a /16

    BastionSSHCIDR:
        AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
        Description: The CIDR IP range that is permitted to SSH to bastion instance. Note - a value of 0.0.0.0/0 will allow access from ANY IP address. = Unwanted.
        Type: String
        Default: 127.0.0.1/32

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.0.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.0.11.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.0.20.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.0.21.0/24

    AsgDesiredCapacity:
        Description: The initial capacity of the Auto Scaling group
        Type: String
        Default: 4

    AMIIdParameter:
        Description: Enter a valid AMI ID to launch the instance
        Type: AWS::EC2::Image::Id

    InstanceTypeParameter:
        Description: The Amazon EC2 instance type for your web instances.
        AllowedValues:
            - t2.small
            - t2.medium
            - t2.large
        ConstraintDescription: Must be a valid Amazon EC2 instance type.
        Default: t2.medium
        Type: String

    EC2KeyName:
        Description: Name of an EC2 KeyPair. Your ApplicationServer instances will launch with this KeyPair.
        Type: AWS::EC2::KeyPair::KeyName

Resources:
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                -   Key: Name
                    Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                -   Key: Name
                    Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [0, !GetAZs ""]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [1, !GetAZs ""]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [0, !GetAZs ""]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [1, !GetAZs ""]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enables SSH Access to Bastion Hosts
            SecurityGroupIngress:
                -   Description: allow SSH
                    IpProtocol: tcp
                    FromPort: '22'
                    ToPort: '22'
                    CidrIp: !Ref 'BastionSSHCIDR'
                -   Description: allow icmp
                    IpProtocol: icmp
                    FromPort: '-1'
                    ToPort: '-1'
                    CidrIp: !Ref 'BastionSSHCIDR'
            SecurityGroupEgress:
                -   Description: allow all outgoing
                    IpProtocol: '-1'
                    CidrIp: '0.0.0.0/0'
            VpcId:
                    !Ref VPC


    BastionInstanceRole:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
                - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service:
                                - ec2.amazonaws.com
                        Action:
                            - sts:AssumeRole
            Path: '/'
            Policies:
                -   PolicyName: logs
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                    - logs:DescribeLogStreams
                                Resource:
                                    - arn:aws:logs:*:*:*

    BastionInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: '/'
            Roles:
                - !Ref BastionInstanceRole

    BastionLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            IamInstanceProfile: !Ref BastionInstanceProfile
            ImageId: !Ref AMIIdParameter
            InstanceMonitoring: true
            InstanceType: !Ref InstanceTypeParameter
            KeyName: !Ref EC2KeyName
            SecurityGroups:
                - !Ref BastionSecurityGroup

    BastionInstance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref AMIIdParameter
            InstanceType: !Ref InstanceTypeParameter
            KeyName: !Ref EC2KeyName
            NetworkInterfaces:
                -   GroupSet:
                        - !Ref 'BastionSecurityGroup'
                    AssociatePublicIpAddress: 'true'
                    DeviceIndex: '0'
                    DeleteOnTermination: 'true'
                    SubnetId:
                        !Ref PublicSubnet1
            UserData: !Base64
                Fn::Sub: "#!/bin/bash -xe\napt update -y\n"
            Tags:
                -   Key: Name
                    Value: !Sub '${EnvironmentName}-BASTION'

    ApplicationServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for the application servers
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    SourceSecurityGroupId: !Ref PublicAlbSecurityGroup
                -   IpProtocol: tcp
                    FromPort: 22
                    ToPort: 22
                    SourceSecurityGroupId: !Ref BastionSecurityGroup
            VpcId:
                    !Ref VPC

    #DatabaseSecurityGroup:
    #    Type: AWS::EC2::SecurityGroup
    #    Properties:
    #        GroupDescription: Security group for Amazon RDS cluster
    #        SecurityGroupIngress:
    #            -   IpProtocol: tcp
    #                FromPort: 3306
    #                ToPort: 3306
    #                SourceSecurityGroupId: !Ref ApplicationServerSecurityGroup
    #        VpcId:
    #                !Ref VPC

    PublicAlbSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for ALB
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
            VpcId:
                    !Ref VPC

    ApplicationServerTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckPath: /
            HealthyThresholdCount: 5
            UnhealthyThresholdCount: 2
            HealthCheckTimeoutSeconds: 5
            HealthCheckIntervalSeconds: 30
            HealthCheckProtocol: HTTP
            Port: 80
            Protocol: HTTP
            VpcId:
                    !Ref VPC
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} TargetGroup

    ApplicationServerASG:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            MinSize: !Ref AsgDesiredCapacity
            MaxSize: !Ref AsgDesiredCapacity
            DesiredCapacity: !Ref AsgDesiredCapacity
            HealthCheckGracePeriod: 300
            LaunchConfigurationName:
                    !Ref ApplicationServerLaunchConfiguration
            VPCZoneIdentifier:
                - !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
            TargetGroupARNs:
                -   Ref: ApplicationServerTargetGroup

    ApplicationServerLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            SecurityGroups:
                -   Ref: PublicAlbSecurityGroup
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} ALB


    ApplicationServerLBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                -   Type: forward
                    TargetGroupArn:
                        Ref: ApplicationServerTargetGroup
            LoadBalancerArn:
                Ref: ApplicationServerLB
            Port: '80'
            Protocol: HTTP


    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                -   Type: forward
                    TargetGroupArn: !Ref ApplicationServerTargetGroup
            Conditions:
                -   Field: path-pattern
                    Values: [/]
            ListenerArn: !Ref ApplicationServerLBListener
            Priority: 1


    ApplicationServerLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        CreationPolicy:
            ResourceSignal:
                Count: 1
                Timeout: "PT15M"
        Metadata:
            AWS::CloudFormation::Init:
                configSets:
                    deploy_webserver:
                        - install_and_enable_cfn_hup
                        - setup_install_udagram
                        - setup_install_cloudwatch
                        - install_udagram
                        - install_cloudwatch
                install_and_enable_cfn_hup:
                    files:
                        /etc/cfn/cfn-hup.conf:
                            content: !Join
                                - ''
                                -   - "[main]\n"
                                    - stack=
                                    - !Ref 'AWS::StackId'
                                    - "\n"
                                    - region=
                                    - !Ref 'AWS::Region'
                                    - "\n"
                            mode: '000400'
                            owner: root
                            group: root
                        /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                            content: !Join
                                - ''
                                -   - "[cfn-auto-reloader-hook]\n"
                                    - "triggers=post.update\n"
                                    - "path=Resources.ApplicationServerLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n"
                                    - 'action=/opt/aws/bin/cfn-init -v '
                                    - '         --stack '
                                    - !Ref 'AWS::StackName'
                                    - '         --resource LaunchConfiguration '
                                    - '         --configsets deploy_webserver '
                                    - '         --region '
                                    - !Ref 'AWS::Region'
                                    - "\n"
                                    - "runas=root\n"
                        /lib/systemd/system/cfn-hup.service:
                            content: !Join
                                - ''
                                -   - "[Unit]\n"
                                    - "Description=cfn-hup daemon\n\n"
                                    - "[Service]\n"
                                    - "Type=simple\n"
                                    - "ExecStart=/opt/aws/bin/cfn-hup\n"
                                    - "Restart=always\n\n"
                                    - "[Install]\n"
                                    - "WantedBy=multi-user.target\n"
                    commands:
                        '01enable_cfn_hup':
                            command: systemctl enable cfn-hup.service
                        '02start_cfn_hup':
                            command: systemctl start cfn-hup.service
                setup_install_udagram:
                    files:
                        /tmp/install_udagram.sh:
                            content: !Sub |
                                #!/bin/bash -xe
                                apt update -y
                                apt install unzip -y
                                apt install apache2 -y
                                apt install awscli -y
                                systemctl start apache2.service
                                cd /var/www/html
                                aws s3 cp s3://udacity-demo-1/udacity.zip .
                                unzip -o udacity.zip
                            mode: 000500
                            owner: root
                            group: root
                setup_install_cloudwatch:
                    files:
                        /tmp/install_cloudwatch.sh:
                            content: !Sub |
                                #!/bin/bash -xe
                                wget https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
                                wget https://s3.amazonaws.com/aws-codedeploy-us-west-2/cloudwatch/codedeploy_logs.conf
                                chmod +x ./awslogs-agent-setup.py
                                python awslogs-agent-setup.py -n -r us-west-2 -c s3://aws-codedeploy-us-west-2/cloudwatch/awslogs.conf
                                mkdir -p /var/awslogs/etc/config
                                mv codedeploy_logs.conf /var/awslogs/etc/config/
                                service awslogs start
                                systemctl enable awslogs
                                systemctl start awslogs
                            mode: 000500
                            owner: root
                            group: root
                install_udagram:
                    commands:
                        install_udagram:
                            command: /tmp/install_udagram.sh
                            cwd: /home/ubuntu
                            ignoreErrors: false
                install_cloudwatch:
                    install_cloudwatch:
                        command: /tmp/install_cloudwatch.sh
                        cwd: /home/ubuntu
                        ignoreErrors: true
        Properties:
            IamInstanceProfile: !Ref ApplicationServerInstanceProfile
            ImageId: !Ref AMIIdParameter
            InstanceMonitoring: false
            InstanceType: !Ref InstanceTypeParameter
            SecurityGroups:
                - !Ref ApplicationServerSecurityGroup
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    apt-get update -y
                    apt-get install -y python3-setuptools
                    update-alternatives --install /usr/bin/python python /usr/bin/python3.6 20

                    python --version
                    mkdir -p /opt/aws/bin
                    wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
                    python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz

                    /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource ApplicationServerLaunchConfiguration --region ${AWS::Region} --configsets deploy_webserver
                    /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource ApplicationServerASG --region ${AWS::Region}
            BlockDeviceMappings:
                -   DeviceName: "/dev/sdk"
                    Ebs:
                        VolumeSize: '10'

    UdacityS3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            ManagedPolicyArns:
                - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
                - 'arn:aws:iam::aws:policy/AmazonSSMDirectoryServiceAccess'
                - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service:
                                - ec2.amazonaws.com
                        Action:
                            - sts:AssumeRole
            Path: /
            Policies:
                -   PolicyName: WebServerS3AccessPolicy
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - s3:Get*
                                    - s3:List*
                                Resource:
                                    - arn:aws:s3:::*
                                    - arn:aws:s3:::*
                -   PolicyName: LogPolicy
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                    - logs:DescribeLogStreams
                                Resource:
                                    - arn:aws:logs:*:*:*
                -   PolicyName: ParamGetPolicy
                    PolicyDocument:
                        Version: 2012-10-17
                        Statement:
                            -   Effect: Allow
                                Action:
                                    - ssm:GetParameters
                                    - ssm:GetParameter
                                Resource:
                                    - arn:aws:ssm:*:*:parameter/Udacity/Udagram/*

    ApplicationServerInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: '/'
            Roles:
                - !Ref UdacityS3ReadOnlyEC2

Outputs:

    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
            Name: !Sub '${EnvironmentName}-VPC'

    LoadBalancerDNS:
        Description: the Cname of the loadbalancer
        Value: !Sub
            - 'http://${DNSName}'
            - { DNSName: !GetAtt ApplicationServerLB.DNSName }
        Export:
            Name: !Sub '${EnvironmentName}-LoadBalancerDNS'

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
        Export:
            Name: !Sub '${EnvironmentName}-PUB-SUBNETS'

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1
        Export:
            Name: !Sub '${EnvironmentName}-PUB-SN1'

    PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2
        Export:
            Name: !Sub '${EnvironmentName}-PUB-SN2'

    BastionSecurityGroup:
        Description: A reference to the Bastion SecurityGroup
        Value: !Ref BastionSecurityGroup
        Export:
            Name: !Sub '${EnvironmentName}-BastionSecurityGroup'


#    ImageId:
#        Description: the ImageId used in the ApplicationServers.
#        Value: !Ref AMIIdParameter
#        Export:
#            Name: !Sub '${EnvironmentName}-LaunchConfiguration-ImageId'
